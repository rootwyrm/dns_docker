#!/usr/bin/env bash
################################################################################
# Copyright (C) 2020-* Phillip R. Jaenke <prj+docker@rootwyrm.com>
# All rights reserved
#
# CC-BY-NC-3.0
# See /LICENSE for details
################################################################################

. /opt/rootwyrm/lib/system.lib.sh

## Separate out webserver config.
function webserver()
{
	local WEBCONFSRC="/opt/rootwyrm/conf/webserver.conf.orig"
	local WEBCONFDEST="/usr/local/etc/dnsdist/conf.d/webserver.conf"

	## Calculate our subnet with best effort
	DEVICE=$(ip route | grep ^default | awk '{print $(NF)}')
	WEBACL=$(ip route | grep -v ^default | grep $DEVICE | awk '{print $1}')
	if [ -f /firstboot ] || [ ! -f $WEBCONFDEST ]; then
		printf '[dnsdist] Configuring webserver with default ACL %s\n' "${WEBACL}"
		cp $WEBCONFSRC $WEBCONFDEST
	else
		## Assume nothing to do, this is user-accessible.
		return 0
	fi

	## Actually start replacing strings.
	sed -i -e 's/%%DNSDIST_LOCALIP4%%/'${DEFAULT_IP4}'/' $WEBCONFDEST
	sed -i -e 's/%%DEFAULT_ACL%%/'${WEBACL}'/' $WEBCONFDEST

	## Create API key in persistent storage
	APIKEY="${CONFIGDIR}/conf.d/api.key"
	if [ ! -f $APIKEY ]; then
		## Use blocking randomness
		cat /dev/random | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1 > $APIKEY
		chmod 0700 $APIKEY
		chown 0:0 $APIKEY
		DNSDIST_APIKEY=$(cat $APIKEY)
	else
		DNSDIST_APIKEY=$(cat $APIKEY)
	fi
	## Insert APIKEY
	sed -i -e 's/%%DNSDIST_APIKEY%%/'$DNSDIST_APIKEY'/g' $WEBCONFDEST
	
	## Generate a new random password when necessary
	PASSWD="/usr/local/etc/dnsdist/passwd"
	if [ ! -f $PASSWD ] && [ -z $DNSDIST_PASSWD ]; then
		## Use blocking randomness
		cat /dev/random | tr -dc 'a-zA-Z0-9' | fold -w 16 | head -n 1 > $PASSWD
		chmod 0700 $PASSWD
		chown 0:0 $PASSWD
		export DNSDIST_PASSWD=$(cat $PASSWD)
	elif [ ! -z $DNSDIST_PASSWD ]; then
		echo "${DNSDIST_PASSWD}" > $PASSWD
		export DNSDIST_PASSWD=$(cat $PASSWD)
	else
		export DNSDIST_PASSWD=$(cat $PASSWD)
	fi
	## Insert password
	sed -i -e 's/%%DNSDIST_PASSWD%%/'$DNSDIST_PASSWD'/g' $WEBCONFDEST
}

function config()
{
	export CONFIGDIR="/usr/local/etc/dnsdist"
	export CONFIGSRC="/opt/rootwyrm/conf/dnsdist.conf.orig"
	export CONFIG="/usr/local/etc/dnsdist/dnsdist.conf"
	
	if [ -f /firstboot ]; then
		printf '[dnsdist] Performing initial firstboot tasks.\n'
		printf '[dnsdist] This may take some time!\n'
		printf '\n'
		export FIRSTBOOT=1
	fi
	if [ ! -f ${CONFIG} ]; then 
		cp ${CONFIGSRC} ${CONFIG}
		if [ $? -ne 0 ]; then
			RC=$?
			echo "Could not install configuration - ERROR $RC"
			exit $RC
		fi
	elif [ -f /factory.reset ]; then
		printf '[dnsdist] Factory reset requested!\n'
		printf '[dnsdist] Passwords and keys will NOT be changed.\n'
		printf '[dnsdist] Configuration will be backed up.\n'
		printf '\n'
		cp ${CONFIG} ${CONFIG}.bak
		cp ${CONFIGSRC} ${CONFIG}
		export FIRSTBOOT=1
	fi

	## Create our control key
	if [ ! -z $FIRSTBOOT ]; then
		CONTROLKEY=$(echo 'makeKey()' | dnsdist -l 127.0.0.1:53531 -C /dev/null | grep ^setKey)
		sed -i -e 's,%%DNSDIST_CONTROLKEY%%,'$CONTROLKEY',g' $CONFIG
		echo $CONTROLKEY > $CONFIGDIR/control.conf
	fi

	## XXX: need to tune tcp fastopen automagically
	## TODO: maybe disable tcpfastopen?? identifiable thing.
	## Create listeners based on CPU count
	DNSDIST_THREAD=$(cat /proc/cpuinfo | grep processor | wc -l)
	## Limits
	if [ $DNSDIST_THREAD -gt 16 ]; then
		DNSDIST_THREAD=16
	elif [ $DNSDIST_THREAD -lt 4 ]; then
		## Needed to avoid a known contention issue
		DNSDIST_THREAD=4
	fi
	dnsdist_listener=1
	if [ ! -z $FIRSTBOOT ]; then
		while [ $dnsdist_listener -le ${DNSDIST_THREAD} ]; do
			LISTENER="addLocal('"${DEFAULT_IP4}"', { reusePort=true, tcpFastOpenQueueSize=64 })"
			sed -i -E '/--Local Listeners/a '"$LISTENER"'' ${CONFIG}
			dnsdist_listener=$(( $dnsdist_listener + 1 ))
		done
	fi
	## XXX: need the tls listeners in here, same way
	## XXX: except there's the SNI trickery involved.

	## Insert IP addresses
	sed -i -e 's/%%DNSDIST_LOCALIP4%%/'${DEFAULT_IP4}'/g' $CONFIG
	## Insert IPv6 if present, delete if absent
	if [ ! -z $SYSTEM_LOCALIP6 ]; then
		sed -i -e 's/%%DNSDIST_LOCALIP6%%/'${DEFAULT_IP6}'/g' $CONFIG
	else
		sed -i -e '/.*%%DNSDIST_LOCALIP6%%.*/d' $CONFIG
	fi
	## API key
	#sed -i -e 's/%%DNSDIST_APIKEY%%/'$DNSDIST_APIKEY'/g' $CONFIG
	## Password
	#sed -i -e 's/%%DNSDIST_PASSWD%%/'$DNSDIST_PASSWD'/g' $CONFIG

	## Call webserver function
	webserver

	## Prevent re-run
	if [ ! -z $FIRSTBOOT ]; then
		if [ -f /firstboot ]; then
			rm /firstboot
		fi
		if [ -f /factory.reset ]; then
			rm /factory.reset
		fi
	fi

	## Needs duplicated for message	
	if [ -z $PASSWD ]; then
		PASSWD="/usr/local/etc/dnsdist/passwd"
	fi
	if [ ! -f $PASSWD ] && [ -z $DNSDIST_PASSWD ]; then
		DNSDIST_PASSWD=$(cat $PASSWD)
	fi
	if [ -z $APIKEY ]; then
		APIKEY="${CONFIGDIR}/conf.d/api.key"
	fi
	DNSDIST_APIKEY=$(cat $APIKEY)

	## Fix permissions always
	chown -R dnsdocker:dnsdocker /usr/local/etc/dnsdist/dnsdist.conf
	for x in conf.d lua maps; do
		chown -R dnsdocker:dnsdocker /usr/local/etc/dnsdist/$x
	done
	chown 0:0 $APIKEY
	chown 0:0 $PASSWD
}

function message()
{
	outfile="/message"
	if [ -f $outfile ]; then
		rm $outfile
	fi
	if [ -z $DNSDIST_PASSWD ]; then
		DNSDIST_PASSWD=$(cat /usr/local/etc/dnsdist/passwd)
	printf '**********************************************************************\n' >> $outfile
	printf 'System IPv4 Address %s\n' "${DEFAULT_IP4}" >> $outfile
	if [ ! -z ${DEFAULT_IP6} ]; then
		printf 'System IPv6 Address: %s\n' "${DEFAULT_IP6}" >> $outfile
	fi
	printf '\n' >> $outfile
	printf 'dnsdist binding to %s\n' "${DEFAULT_IP4}" >> $outfile
	if [ ! -z ${DEFAULT_IP6} ]; then
		printf 'dnsdist binding to %s\n' "${DEFAULT_IP6}" >> $outfile
	fi
	printf '\n' >> $outfile
	printf 'dnsdist API Key: %s\n' "$DNSDIST_APIKEY" >> $outfile
	printf 'dnsdist Web Password: admin:%s\n' "$DNSDIST_PASSWD" >> $outfile
	printf '**********************************************************************\n' >> $outfile
}

ingest_environment
config
message
