#!/usr/bin/env bash
################################################################################
# Copyright (C) 2020-* Phillip R. Jaenke <prj+docker@rootwyrm.com>
# All rights reserved
#
# CC-BY-NC-3.0
# See /LICENSE for details
################################################################################

. /opt/rootwyrm/lib/deploy.lib.sh

function config()
{
	export CONFIGDIR="/usr/local/etc/nsd"
	export CONFIGSRC="/opt/rootwyrm/conf/nsd.conf.orig"
	export CONFIG="/usr/local/etc/nsd/nsd.conf"

	if [ -f /firstboot ]; then
		printf '[nsd] Performing initial firstboot tasks.\n'
		printf '[nsd] This may take some time!\n'
		printf '\n'
		export FIRSTBOOT=1
	fi
	if [ ! -f ${CONFIG} ]; then
		cp ${CONFIGSRC} ${CONFIG}
		if [ $? -ne 0 ]; then
			RC=$?
			printf 'Could not install configuration - ERROR %s\n' "$RC"
			exit $RC
		fi
	elif [ -f /factory.reset ]; then
		printf '[nsd] Factory reset requested!\n'
		printf '[nsd] Passwords and keys will NOT be changed.\n'
		printf '[nsd] Configuration will be backed up.\n'
		printf '\n'
		cp ${CONFIG} ${CONFIG}.bak
		cp ${CONFIGSRC} ${CONFIG}
		export FIRSTBOOT=1
	fi

	## Run ncpu servers up to a maximum 16 - %%NSD_NCPU%%
	if [ ! -z $FIRSTBOOT ]; then
		grep '%%NSD_NCPU%%' $CONFIG > /dev/null
		if [ $? -eq 1 ]; then
			NSD_NCPU=$(cat $CONFIG | grep server-count | awk '{print $2}')
		else
			local cpucount=$(cat /proc/cpuinfo | grep ^processor | wc -l)
			if [[ $cpucount -gt 16 ]]; then
				NSD_NCPU=16
			elif [[ $cpucount -le 2 ]]; then
				NSD_NCPU=2
			else
				NSD_NCPU=$(($cpucount))
			fi
			# Set number of servers to start
			sed -i -e 's/%%NSD_NCPU%%/'$NSD_NCPU'/g' $CONFIG
		fi
	fi

	if [ ! -z $FIRSTBOOT ]; then
		########################################
		## lax.xfr.dns.icann.org
		grep '%%LAX_XFR%%' $CONFIG > /dev/null
		if [ $? -eq 0 ]; then
			## Don't trust the local resolver for these. Ever.
			## This doesn't abuse PCH, because these are one-time lookups.
			LAX_XFR=$(host -t A lax.xfr.dns.icann.org 9.9.9.9 | grep address | awk '{print $4}')
			if [ -z $LAX_XFR ] || [ $LAX_XFR = "" ]; then
				printf 'Could not resolve lax.xfr.dns.icann.org via PCH, aborting!\n'
				exit 1
			fi
			# Set root-servers.net transfers	
			sed -i -e 's/%%LAX_XFR%%/'$LAX_XFR'/g' $CONFIG
		fi
		########################################
		## iad.xfr.dns.icann.org
		grep '%%IAD_XFR%%' $CONFIG > /dev/null
		if [ $? -eq 0 ]; then
			IAD_XFR=$(host -t A iad.xfr.dns.icann.org 9.9.9.9 | grep address | awk '{print $4}')
			if [ -z $IAD_XFR ] || [ $IAD_XFR = "" ]; then
				printf 'Could not resolve iad.xfr.dns.icann.org via PCH, aborting!\n'
				exit 1
			fi
			# Set root-servers.net transfers	
			sed -i -e 's/%%IAD_XFR%%/'$IAD_XFR'/g' $CONFIG
		fi
	fi

	## Set up control keys on every run.
	if [ ! -f $CFGDIR/nsd_control.key ] || [ ! -f $CFGDIR/nsd_control.pem ] || [ ! -f $CFGDIR/nsd_server.key ] || [ ! -f $CFGDIR/nsd_server.pem ]; then
		printf '[nsd] Setting up remote control keys...'
		/usr/local/sbin/nsd-control-setup > /dev/null 2>&1
		if [ $? -ne 0 ]; then
			RC=$?
			printf '[ERROR] $RC'
			exit $RC
		else
			printf ' [ok]\n'
			export CONTROL_SETUP=1
		fi
	else
		export CONTROL_SETUP=1
	fi

	## Bind to the IPv4 address
	if [ ! -z $FIRSTBOOT ]; then
		sed -i -e 's/%%NSD_LOCALIP4%%/'$SYSTEM_LOCALIP4'/g' $CONFIG
		## Bind to IPv6 if present, disable if not
		if [ ! -z $NSD_LOCALIP6 ]; then
			sed -i -e 's/%%NSD_LOCALIP6%%/'$SYSTEM_IP6'/g' $CONFIG
		else
			sed -i -e '/.*%%NSD_LOCALIP6%%.*/d' $CONFIG
		fi
	fi

	## Fix permissions on every start
	chown -R dnsdocker:dnsdocker /var/db/nsd
	chown dnsdocker:dnsdocker /usr/local/etc/nsd
	chown dnsdocker:dnsdocker /usr/local/etc/nsd/*key
	chown dnsdocker:dnsdocker /usr/local/etc/nsd/*pem
	chown dnsdocker:dnsdocker /usr/local/etc/nsd/*conf
	chown -R dnsdocker:dnsdocker /usr/local/etc/nsd/localroot
	chown -R dnsdocker:dnsdocker /usr/local/etc/nsd/zones
	chown -R dnsdocker:dnsdocker /usr/local/etc/nsd/conf.d
}

function message()
{
	printf '**********************************************************************\n'
	printf 'System IPv4 Address: %s\n' "$SYSTEM_LOCALIP4"
	if [ ! -z $SYSTEM_LOCALIP6 ]; then
		printf 'System IPv6 Address: %s\n' "$SYSTEM_LOCALIP6"
	fi
	## Insert IP addresses
	printf 'nsd binding to %s\n' "$SYSTEM_LOCALIP4"
	## Insert IPv6 if present, delete if absent
	if [ ! -z $NSD_LOCALIP6 ]; then
		printf 'nsd binding to %s\n' "$NSD_LOCALIP6"
	fi
	if [ $CONTROL_SETUP = '1' ]; then
		printf 'nsd control socket listening at /run/nsd.control.sock\n'
	fi
	printf 'Starting with %s servers\n' "$NSD_NCPU"
	if [ ! -z $LAX_XFR ]; then
		printf 'Using %s lax.xfr.dns.icann.org for root zones\n' "$LAX_XFR"
	else
		printf 'lax.xfr.dns.icann.org configured for root zones\n'
	fi
	if [ ! -z $IAD_XFR ]; then
		printf 'Using %s lax.xfr.dns.icann.org for root zones\n' "$LAX_XFR"
	else
		printf 'iad.xfr.dns.icann.org configured for root zones\n'
	fi
	printf '**********************************************************************\n'
}

ingest_environment
IPADDRESS
config
message > /message
