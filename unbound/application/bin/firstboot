#!/usr/bin/env bash
################################################################################
# Copyright (C) 2020-* Phillip R. Jaenke <prj+docker@rootwyrm.com>
# All rights reserved
#
# CC-BY-NC-3.0
# See /LICENSE for details
################################################################################

. /opt/rootwyrm/lib/system.lib.sh

# Generate TLS session keys	every start.
function session_regenerate()
{
	printf '[unbound] Regenerating TLS Session Ticket Keys... '
	dd if=/dev/random bs=1 count=80 of=/usr/local/etc/unbound/tls_secret0.key > /dev/null 2>&1
	KEYR0=$?
	dd if=/dev/random bs=1 count=80 of=/usr/local/etc/unbound/tls_secret1.key > /dev/null 2>&1
	KEYR1=$?
	dd if=/dev/random bs=1 count=80 of=/usr/local/etc/unbound/tls_secret2.key > /dev/null 2>&1
	KEYR2=$?
	if [ $KEYR0 != 0 ] || [ $KEYR1 != 0 ] || [ $KEYR2 != 0 ]; then
		printf 'FAILED!\n'
	else
		printf '[ok]\n'
	fi
}

function config()
{
	export CONFIGDIR="/usr/local/etc/unbound"
	export CONFIGSRC="/opt/rootwyrm/conf/unbound.conf.orig"
	export CONFIG="/usr/local/etc/unbound/unbound.conf"

	## Prevent rerun
	if [ -f /firstboot ]; then
		printf '[unbound] Performing first boot operations.\n'
		cp ${CONFIGSRC} ${CONFIG}
		export FIRSTBOOT=1
	elif [ -f /factory.reset ]; then
		printf '[unbound] Factory reset requested!\n'
		printf '[unbound] This may take some time.\n'
		mv ${CONFIG} ${CONFIG}.bak
		cp ${CONFIGSRC} ${CONFIG}
		export FIRSTBOOT=1
	fi

	## Clear a line
	printf '\n'

	## Perform TLS Session key regeneration early on, and always.
	session_regenerate

	## Symlink system certificates, always check this.
	if [ ! -s /usr/local/etc/unbound/ca-certificates.crt ]; then
		ln -s /etc/ssl/certs/ca-certificates.crt /usr/local/etc/unbound/ca-certificates.crt
	fi

	## Run ncpu servers up to a maximum 16 - %%UNBOUND_NCPU%%
	local cpucount=$(cat /proc/cpuinfo | grep ^processor | wc -l)
	if [[ $cpucount -gt 16 ]]; then
		UNBOUND_NCPU=16
	## Run a minimum of 2 threads
	elif [[ $cpucount -le 2 ]]; then
		UNBOUND_NCPU=2
	else
		UNBOUND_NCPU=$cpucount
	fi

	## Update the root anchors
	if [ ! -z $FIRSTBOOT ]; then
		rm -f ${CONFIGDIR}/root.key
		printf '[unbound] Performing initial retrieval of root anchors... '
		/usr/local/sbin/unbound-anchor
		## Returns 1 if the file doesn't exist on first boot
		if [ $? -eq 0 ] || [ $? -eq 1 ]; then
			printf '[ok]\n'
		else
			printf '[ERROR %s]\n' "$?"
		fi
	else
		printf '[unbound] Updating root anchors... '
		/usr/local/sbin/unbound-anchor
		if [ $? -eq 0 ]; then 
			printf '[ok]\n'
		else
			printf '[ERROR %s]\n' "$?"
		fi
	fi

	## Generate keys and fix permissions
	if [ ! -f /usr/local/etc/unbound/unbound_server.key ]; then
		printf '[unbound] Setting up remote control keys... '
		/usr/local/sbin/unbound-control-setup > /dev/null 2>&1
		if [ $? -eq 0 ]; then
			printf '[ok]\n'
			export REMOTE_CONTROL=1
		else
			printf '[ERROR %s]\n' "$?"
		fi
	else
		export REMOTE_CONTROL=1
	fi

	if [ ! -z $FIRSTBOOT ]; then
		## Insert IP addresses
		sed -i -e 's/%%UNBOUND_LOCALIP4%%/'${DEFAULT_IP4}'/g' $CONFIG
		## Insert IPv6 if present, delete if absent
		if [ ! -z $SYSTEM_LOCALIP6 ]; then
			sed -i -e 's/%%UNBOUND_LOCALIP6%%/'${DEFAULT_IP4}'/g' $CONFIG
		else
			sed -i -e '/.*%%UNBOUND_LOCALIP6%%.*/d' $CONFIG
		fi
		sed -i -e 's/%%UNBOUND_NCPU%%/'$UNBOUND_NCPU'/g' $CONFIG
	fi
	
	## Prevent triggering firstboot again	
	if [ -f /firstboot ]; then	
		rm -f /firstboot
	fi
	
	## Fix permissions every time
	printf '[unbound] Fixing permissions... \n'
	for x in `ls /usr/local/etc/unbound | grep -v pki | grep -v ca-certificates.crt`; do
		chown -R dnsdocker:dnsdocker /usr/local/etc/unbound/${x}
	done
}

function message()
{
	printf '**********************************************************************\n'
	printf 'System IPv4 Address: %s\n' "${DEFAULT_IP4}"
	if [ ! -z ${DEFAULT_IP6} ]; then
		printf 'System IPv6 Address: %s\n' "${DEFAULT_IP6}"
	fi
	printf '\n'
	printf 'unbound binding to %s\n' "${DEFAULT_IP4}"
	if [ ! -z ${DEFAULT_IP6} ]; then
		printf 'unbound binding to %s\n' "${DEFAULT_IP6}"
	fi
	printf 'unbound starting with %s threads\n' "$UNBOUND_NCPU"
	if [ ! -z $REMOTE_CONTROL ]; then
		printf 'Remote Control is enabled on localhost:8953\n'
	fi
	if [ -f /usr/local/etc/unbound/root.key ]; then
		printf 'DNSSEC Validation enabled\n'  
	fi
	printf '\n'
	printf '**********************************************************************\n'
}

ingest_environment
config
message > /message
